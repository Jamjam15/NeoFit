<?php
session_start();
include 'db.php';

// Function to generate unique transaction ID
function generateTransactionId() {
    $prefix = 'TXN';
    $timestamp = time();
    $random = mt_rand(1000, 9999);
    return $prefix . $timestamp . $random;
}

// Check login
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['success' => false, 'message' => 'Please log in to place an order']);
    exit;
}

$user_id = $_SESSION['user_id'];

// Get user details
$user_query = "SELECT CONCAT(first_name, ' ', last_name) as user_name, email as user_email 
               FROM users WHERE id = ?";
$user_stmt = $conn->prepare($user_query);
$user_stmt->bind_param("i", $user_id);
$user_stmt->execute();
$user_result = $user_stmt->get_result();
$user_data = $user_result->fetch_assoc();

$user_name = $user_data['user_name'];
$user_email = $user_data['user_email'];

$payment_method = $_POST['payment_method'] ?? '';
$delivery_address = $_POST['delivery_address'] ?? '';
$contact_number = $_POST['contact_number'] ?? '';
$cart_id = $_POST['cart_id'] ?? null;

if (empty($payment_method) || empty($delivery_address) || empty($contact_number)) {
    echo json_encode(['success' => false, 'message' => 'Please fill in all required fields']);
    exit;
}

try {
    $conn->begin_transaction();

    // Fetch cart items
    if ($cart_id) {
        $sql = "SELECT c.*, p.product_name, p.product_price 
                FROM cart c
                JOIN products p ON c.product_id = p.id
                WHERE c.id = ? AND c.user_id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("ii", $cart_id, $user_id);
    } else {
        $sql = "SELECT c.*, p.product_name, p.product_price 
                FROM cart c
                JOIN products p ON c.product_id = p.id
                WHERE c.user_id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $user_id);
    }

    $stmt->execute();
    $result = $stmt->get_result();

    $total_amount = 0;
    $cart_items = [];
    while ($item = $result->fetch_assoc()) {
        $subtotal = $item['quantity'] * $item['product_price'];
        $total_amount += $subtotal;
        $cart_items[] = $item;
    }

    // Stock check and other validations
    foreach ($cart_items as $item) {
        // ... existing stock check code ...
    }

    // NeoCreds payment handling
    if ($payment_method === 'NeoCreds') {
        $balance_stmt = $conn->prepare("SELECT neocreds FROM users WHERE id = ?");
        $balance_stmt->bind_param("i", $user_id);
        $balance_stmt->execute();
        $balance_result = $balance_stmt->get_result();
        $user_balance = $balance_result->fetch_assoc()['neocreds'];

        if ($user_balance < $total_amount) {
            echo json_encode(['success' => false, 'message' => 'Insufficient NeoCreds balance']);
            exit;
        }

        // Update user's NeoCreds balance
        $update_balance_sql = "UPDATE users SET neocreds = neocreds - ? WHERE id = ?";
        $update_balance_stmt = $conn->prepare($update_balance_sql);
        $update_balance_stmt->bind_param("di", $total_amount, $user_id);
        $update_balance_stmt->execute();
    }

    // Create order record
    $order_sql = "INSERT INTO orders (user_id, user_name, user_email, total_amount, payment_method, delivery_address, contact_number, order_status) 
                  VALUES (?, ?, ?, ?, ?, ?, ?, 'pending')";
    $order_stmt = $conn->prepare($order_sql);
    $order_stmt->bind_param("issdsss", $user_id, $user_name, $user_email, $total_amount, $payment_method, $delivery_address, $contact_number);
    $order_stmt->execute();
    $order_id = $conn->insert_id;

    // Create payment record
    $transaction_id = generateTransactionId();
    $initial_status = ($payment_method === 'NeoCreds') ? 'success' : 'pending';
    
    $payment_sql = "INSERT INTO payments (transaction_id, order_id, user_name, amount, payment_method, status, payment_date) 
                    VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)";
    $payment_stmt = $conn->prepare($payment_sql);
    $payment_stmt->bind_param("sisdss", $transaction_id, $order_id, $user_name, $total_amount, $payment_method, $initial_status);
    
    if (!$payment_stmt->execute()) {
        throw new Exception("Error creating payment record: " . $conn->error);
    }

    // Process order items and update stock
    $item_stmt = $conn->prepare("INSERT INTO order_items (order_id, product_id, quantity, price, size) VALUES (?, ?, ?, ?, ?)");
    foreach ($cart_items as $item) {
        $item_stmt->bind_param("iiids", $order_id, $item['product_id'], $item['quantity'], $item['product_price'], $item['size']);
        $item_stmt->execute();
        
        // Update product stock
        $size_column = 'quantity_' . strtolower($item['size']);
        $update_stock_sql = "UPDATE products SET $size_column = $size_column - ? WHERE id = ?";
        $stock_stmt = $conn->prepare($update_stock_sql);
        $stock_stmt->bind_param("ii", $item['quantity'], $item['product_id']);
        $stock_stmt->execute();
    }

    // Clear cart
    if ($cart_id) {
        $delete_sql = "DELETE FROM cart WHERE id = ? AND user_id = ?";
        $delete_stmt = $conn->prepare($delete_sql);
        $delete_stmt->bind_param("ii", $cart_id, $user_id);
    } else {
        $delete_sql = "DELETE FROM cart WHERE user_id = ?";
        $delete_stmt = $conn->prepare($delete_sql);
        $delete_stmt->bind_param("i", $user_id);
    }
    $delete_stmt->execute();

    $conn->commit();
    echo json_encode(['success' => true]);

} catch (Exception $e) {
    $conn->rollback();
    error_log("Order processing error: " . $e->getMessage());
    echo json_encode(['success' => false, 'message' => 'An error occurred while processing your order']);
}

?>
